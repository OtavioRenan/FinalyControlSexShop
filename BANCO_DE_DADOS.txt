CREATE DATABASE databasejava;
USE databasejava;

CREATE TABLE FORNECEDORTB (
FORNECEDOR_ID INT(10) NOT NULL AUTO_INCREMENT,
NOME_COMPLETO VARCHAR(50) NOT NULL UNIQUE,
TELEFONE_CELULAR VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) NOT NULL,
FORNECEDOR_DESCRICAO VARCHAR(200) NULL,
PRIMARY KEY(FORNECEDOR_ID)
);

CREATE TABLE PRODUTOTB (
PRODUTO_ID INT(10) NOT NULL AUTO_INCREMENT,
PRODUTO_NOME VARCHAR(80) NOT NULL,
FORNECEDOR_ID INT(10) NOT NULL,
PRODUTO_DESCRICAO VARCHAR(200) NULL,
PRIMARY KEY(PRODUTO_ID),
FOREIGN KEY(FORNECEDOR_ID) REFERENCES FORNECEDORTB (FORNECEDOR_ID) 
);

CREATE TABLE ENTRADATB (
ENTRADA_ID INT(10) NOT NULL AUTO_INCREMENT,
PRODUTO_ID INT(10) NULL DEFAULT NULL,
QTDE INT(11) NULL DEFAULT NULL,
VALOR_UNITARIO FLOAT(9,2) NULL DEFAULT '0.00',
PRIMARY KEY(ENTRADA_ID)
);

CREATE TABLE ESTOQUETB (
ESTOQUE_ID INT(10) NOT NULL AUTO_INCREMENT,
PRODUTO_ID INT(10) NULL DEFAULT NULL,
QTDE INT(11) NULL DEFAULT NULL,
VALOR_UNITARIO FLOAT(9,2) NULL DEFAULT '0.00',
PRIMARY KEY(ESTOQUE_ID)
);

CREATE TABLE SAIDATB (
SAIDA_ID INT(10) NOT NULL AUTO_INCREMENT,
PRODUTO_ID INT(10) NULL DEFAULT NULL,
QTDE INT(11) NULL DEFAULT NULL,
VALOR_UNITARIO FLOAT(9,2) NULL DEFAULT '0.00',
PRIMARY KEY(SAIDA_ID)
);

CREATE TABLE LOGINTB (
LOGIN_ID INT(10) NOT NULL AUTO_INCREMENT,
USUARIO VARCHAR(50) NOT NULL UNIQUE,
SENHA VARCHAR(50) NOT NULL,
PRIMARY KEY(LOGIN_ID)
);



DELIMITER @@
CREATE PROCEDURE PRO_ATUALIZA_ESTOQUE (ID_PROD INT, QTDE_COMPRADA INT, VALOR_UNIT FLOAT(9,2))
BEGIN


DECLARE CONTADOR INT(11);

SELECT COUNT(*) INTO CONTADOR FROM ESTOQUETB WHERE PRODUTO_ID = ID_PROD;

	IF CONTADOR > 0 THEN
		UPDATE ESTOQUETB SET QTDE = QTDE + QTDE_COMPRADA, VALOR_UNITARIO = VALOR_UNIT
		WHERE PRODUTO_ID = ID_PROD;
	ELSE
		INSERT INTO ESTOQUETB(PRODUTO_ID, QTDE, VALOR_UNITARIO) VALUES 
		(ID_PROD, QTDE_COMPRADA, VALOR_UNIT);
	END IF;

END@@
DELIMITER;




//CREADO PARA CORREÇÃO DE ERROS

DELIMITER @@
CREATE PROCEDURE PRO_ATUALIZA_ESTOQUE_SAIDA (ID_PROD INT, QTDE_COMPRADA INT)
BEGIN


DECLARE CONTADOR INT(11);

SELECT COUNT(*) INTO CONTADOR FROM ESTOQUETB WHERE PRODUTO_ID = ID_PROD;

	IF CONTADOR > 0 THEN
		UPDATE ESTOQUETB SET QTDE = QTDE + QTDE_COMPRADA
		WHERE PRODUTO_ID = ID_PROD;
	ELSE
		INSERT INTO ESTOQUETB(PRODUTO_ID, QTDE) VALUES 
		(ID_PROD, QTDE_COMPRADA);
	END IF;

END@@
DELIMITER;




DELIMITER //
CREATE TRIGGER TRG_ENTRADA_AI AFTER INSERT ON ENTRADATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE (NEW.PRODUTO_ID, NEW.QTDE, NEW.VALOR_UNITARIO );

END//
DELIMITER;


DELIMITER ##
CREATE TRIGGER TRG_ENTRADA_AU AFTER UPDATE ON ENTRADATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE (NEW.PRODUTO_ID, NEW.QTDE - OLD.QTDE, NEW.VALOR_UNITARIO );

END##
DELIMITER;


DELIMITER $$
CREATE TRIGGER TRG_ENTRADA_AD AFTER DELETE ON ENTRADATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE (OLD.PRODUTO_ID, OLD.QTDE, OLD.VALOR_UNITARIO );

END$$
DELIMITER;


DELIMITER %%
CREATE TRIGGER TRG_SAIDA_AI AFTER INSERT ON SAIDATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE_SAIDA (NEW.PRODUTO_ID, NEW.QTDE * - 1);

END%%
DELIMITER;


DELIMITER &&
CREATE TRIGGER TRG_SAIDA_AU AFTER UPDATE ON SAIDATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE (NEW.PRODUTO_ID, OLD.QTDE - NEW.QTDE, NEW.VALOR_UNITARIO );

END&&
DELIMITER;



DELIMITER !!
CREATE TRIGGER TRG_SAIDA_AD AFTER DELETE ON SAIDATB
FOR EACH ROW
BEGIN

CALL PRO_ATUALIZA_ESTOQUE (OLD.PRODUTO_ID, OLD.QTDE, OLD.VALOR_UNITARIO );

END!!
DELIMITER;



USE databasejava;
INSERT INTO LOGINTB VALUES
(DEFAULT, "RENAN", "ADMIN"),
(DEFAULT, "MARCELO", "ADMIN"),
(DEFAULT, "ERICK", "ADMIN");



